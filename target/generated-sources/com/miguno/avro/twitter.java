/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.miguno.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** An enhanced schema for storing Twitter-like messages with additional metadata and attributes */
@org.apache.avro.specific.AvroGenerated
public class twitter extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4937537012261079358L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"twitter\",\"namespace\":\"com.miguno.avro\",\"doc\":\"An enhanced schema for storing Twitter-like messages with additional metadata and attributes\",\"fields\":[{\"name\":\"tweet_id\",\"type\":\"string\",\"doc\":\"Unique identifier for the tweet\"},{\"name\":\"username\",\"type\":\"string\",\"doc\":\"Name of the user account on Twitter.com\"},{\"name\":\"display_name\",\"type\":[\"null\",\"string\"],\"doc\":\"Display name of the user (can be null if not set)\",\"default\":null},{\"name\":\"tweet\",\"type\":\"string\",\"doc\":\"The content of the user's Twitter message\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Unix epoch time in milliseconds when the tweet was created\"},{\"name\":\"geo_location\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"GeoLocation\",\"fields\":[{\"name\":\"latitude\",\"type\":\"double\",\"doc\":\"Latitude of the tweet location\"},{\"name\":\"longitude\",\"type\":\"double\",\"doc\":\"Longitude of the tweet location\"}]}],\"doc\":\"Geographical location where the tweet was posted, if available\",\"default\":null},{\"name\":\"hashtags\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"List of hashtags included in the tweet\"},{\"name\":\"mentions\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"List of usernames mentioned in the tweet\"},{\"name\":\"likes\",\"type\":\"int\",\"doc\":\"Number of likes the tweet has received\"},{\"name\":\"retweets\",\"type\":\"int\",\"doc\":\"Number of retweets\"},{\"name\":\"is_retweet\",\"type\":\"boolean\",\"doc\":\"Whether this tweet is a retweet\"},{\"name\":\"media_attachments\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Media\",\"fields\":[{\"name\":\"media_type\",\"type\":\"string\",\"doc\":\"Type of media (image, video, gif, etc.)\"},{\"name\":\"url\",\"type\":\"string\",\"doc\":\"URL of the media\"}]}}],\"doc\":\"Attachments such as images, videos, or gifs included in the tweet\",\"default\":null},{\"name\":\"reply_to_tweet_id\",\"type\":[\"null\",\"string\"],\"doc\":\"If the tweet is a reply, this is the ID of the parent tweet\",\"default\":null},{\"name\":\"user_metadata\",\"type\":{\"type\":\"record\",\"name\":\"UserMetadata\",\"fields\":[{\"name\":\"followers_count\",\"type\":\"int\",\"doc\":\"Number of followers the user has\"},{\"name\":\"following_count\",\"type\":\"int\",\"doc\":\"Number of accounts the user is following\"},{\"name\":\"account_created\",\"type\":\"long\",\"doc\":\"Unix epoch time in milliseconds when the account was created\"},{\"name\":\"verified\",\"type\":\"boolean\",\"doc\":\"Whether the user account is verified\"}]},\"doc\":\"Metadata about the user who posted the tweet\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<twitter> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<twitter> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<twitter> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<twitter> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<twitter> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this twitter to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a twitter from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a twitter instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static twitter fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for the tweet */
  private java.lang.CharSequence tweet_id;
  /** Name of the user account on Twitter.com */
  private java.lang.CharSequence username;
  /** Display name of the user (can be null if not set) */
  private java.lang.CharSequence display_name;
  /** The content of the user's Twitter message */
  private java.lang.CharSequence tweet;
  /** Unix epoch time in milliseconds when the tweet was created */
  private long timestamp;
  /** Geographical location where the tweet was posted, if available */
  private com.miguno.avro.GeoLocation geo_location;
  /** List of hashtags included in the tweet */
  private java.util.List<java.lang.CharSequence> hashtags;
  /** List of usernames mentioned in the tweet */
  private java.util.List<java.lang.CharSequence> mentions;
  /** Number of likes the tweet has received */
  private int likes;
  /** Number of retweets */
  private int retweets;
  /** Whether this tweet is a retweet */
  private boolean is_retweet;
  /** Attachments such as images, videos, or gifs included in the tweet */
  private java.util.List<com.miguno.avro.Media> media_attachments;
  /** If the tweet is a reply, this is the ID of the parent tweet */
  private java.lang.CharSequence reply_to_tweet_id;
  /** Metadata about the user who posted the tweet */
  private com.miguno.avro.UserMetadata user_metadata;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public twitter() {}

  /**
   * All-args constructor.
   * @param tweet_id Unique identifier for the tweet
   * @param username Name of the user account on Twitter.com
   * @param display_name Display name of the user (can be null if not set)
   * @param tweet The content of the user's Twitter message
   * @param timestamp Unix epoch time in milliseconds when the tweet was created
   * @param geo_location Geographical location where the tweet was posted, if available
   * @param hashtags List of hashtags included in the tweet
   * @param mentions List of usernames mentioned in the tweet
   * @param likes Number of likes the tweet has received
   * @param retweets Number of retweets
   * @param is_retweet Whether this tweet is a retweet
   * @param media_attachments Attachments such as images, videos, or gifs included in the tweet
   * @param reply_to_tweet_id If the tweet is a reply, this is the ID of the parent tweet
   * @param user_metadata Metadata about the user who posted the tweet
   */
  public twitter(java.lang.CharSequence tweet_id, java.lang.CharSequence username, java.lang.CharSequence display_name, java.lang.CharSequence tweet, java.lang.Long timestamp, com.miguno.avro.GeoLocation geo_location, java.util.List<java.lang.CharSequence> hashtags, java.util.List<java.lang.CharSequence> mentions, java.lang.Integer likes, java.lang.Integer retweets, java.lang.Boolean is_retweet, java.util.List<com.miguno.avro.Media> media_attachments, java.lang.CharSequence reply_to_tweet_id, com.miguno.avro.UserMetadata user_metadata) {
    this.tweet_id = tweet_id;
    this.username = username;
    this.display_name = display_name;
    this.tweet = tweet;
    this.timestamp = timestamp;
    this.geo_location = geo_location;
    this.hashtags = hashtags;
    this.mentions = mentions;
    this.likes = likes;
    this.retweets = retweets;
    this.is_retweet = is_retweet;
    this.media_attachments = media_attachments;
    this.reply_to_tweet_id = reply_to_tweet_id;
    this.user_metadata = user_metadata;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tweet_id;
    case 1: return username;
    case 2: return display_name;
    case 3: return tweet;
    case 4: return timestamp;
    case 5: return geo_location;
    case 6: return hashtags;
    case 7: return mentions;
    case 8: return likes;
    case 9: return retweets;
    case 10: return is_retweet;
    case 11: return media_attachments;
    case 12: return reply_to_tweet_id;
    case 13: return user_metadata;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tweet_id = (java.lang.CharSequence)value$; break;
    case 1: username = (java.lang.CharSequence)value$; break;
    case 2: display_name = (java.lang.CharSequence)value$; break;
    case 3: tweet = (java.lang.CharSequence)value$; break;
    case 4: timestamp = (java.lang.Long)value$; break;
    case 5: geo_location = (com.miguno.avro.GeoLocation)value$; break;
    case 6: hashtags = (java.util.List<java.lang.CharSequence>)value$; break;
    case 7: mentions = (java.util.List<java.lang.CharSequence>)value$; break;
    case 8: likes = (java.lang.Integer)value$; break;
    case 9: retweets = (java.lang.Integer)value$; break;
    case 10: is_retweet = (java.lang.Boolean)value$; break;
    case 11: media_attachments = (java.util.List<com.miguno.avro.Media>)value$; break;
    case 12: reply_to_tweet_id = (java.lang.CharSequence)value$; break;
    case 13: user_metadata = (com.miguno.avro.UserMetadata)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'tweet_id' field.
   * @return Unique identifier for the tweet
   */
  public java.lang.CharSequence getTweetId() {
    return tweet_id;
  }


  /**
   * Sets the value of the 'tweet_id' field.
   * Unique identifier for the tweet
   * @param value the value to set.
   */
  public void setTweetId(java.lang.CharSequence value) {
    this.tweet_id = value;
  }

  /**
   * Gets the value of the 'username' field.
   * @return Name of the user account on Twitter.com
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }


  /**
   * Sets the value of the 'username' field.
   * Name of the user account on Twitter.com
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'display_name' field.
   * @return Display name of the user (can be null if not set)
   */
  public java.lang.CharSequence getDisplayName() {
    return display_name;
  }


  /**
   * Sets the value of the 'display_name' field.
   * Display name of the user (can be null if not set)
   * @param value the value to set.
   */
  public void setDisplayName(java.lang.CharSequence value) {
    this.display_name = value;
  }

  /**
   * Gets the value of the 'tweet' field.
   * @return The content of the user's Twitter message
   */
  public java.lang.CharSequence getTweet() {
    return tweet;
  }


  /**
   * Sets the value of the 'tweet' field.
   * The content of the user's Twitter message
   * @param value the value to set.
   */
  public void setTweet(java.lang.CharSequence value) {
    this.tweet = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Unix epoch time in milliseconds when the tweet was created
   */
  public long getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Unix epoch time in milliseconds when the tweet was created
   * @param value the value to set.
   */
  public void setTimestamp(long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'geo_location' field.
   * @return Geographical location where the tweet was posted, if available
   */
  public com.miguno.avro.GeoLocation getGeoLocation() {
    return geo_location;
  }


  /**
   * Sets the value of the 'geo_location' field.
   * Geographical location where the tweet was posted, if available
   * @param value the value to set.
   */
  public void setGeoLocation(com.miguno.avro.GeoLocation value) {
    this.geo_location = value;
  }

  /**
   * Gets the value of the 'hashtags' field.
   * @return List of hashtags included in the tweet
   */
  public java.util.List<java.lang.CharSequence> getHashtags() {
    return hashtags;
  }


  /**
   * Sets the value of the 'hashtags' field.
   * List of hashtags included in the tweet
   * @param value the value to set.
   */
  public void setHashtags(java.util.List<java.lang.CharSequence> value) {
    this.hashtags = value;
  }

  /**
   * Gets the value of the 'mentions' field.
   * @return List of usernames mentioned in the tweet
   */
  public java.util.List<java.lang.CharSequence> getMentions() {
    return mentions;
  }


  /**
   * Sets the value of the 'mentions' field.
   * List of usernames mentioned in the tweet
   * @param value the value to set.
   */
  public void setMentions(java.util.List<java.lang.CharSequence> value) {
    this.mentions = value;
  }

  /**
   * Gets the value of the 'likes' field.
   * @return Number of likes the tweet has received
   */
  public int getLikes() {
    return likes;
  }


  /**
   * Sets the value of the 'likes' field.
   * Number of likes the tweet has received
   * @param value the value to set.
   */
  public void setLikes(int value) {
    this.likes = value;
  }

  /**
   * Gets the value of the 'retweets' field.
   * @return Number of retweets
   */
  public int getRetweets() {
    return retweets;
  }


  /**
   * Sets the value of the 'retweets' field.
   * Number of retweets
   * @param value the value to set.
   */
  public void setRetweets(int value) {
    this.retweets = value;
  }

  /**
   * Gets the value of the 'is_retweet' field.
   * @return Whether this tweet is a retweet
   */
  public boolean getIsRetweet() {
    return is_retweet;
  }


  /**
   * Sets the value of the 'is_retweet' field.
   * Whether this tweet is a retweet
   * @param value the value to set.
   */
  public void setIsRetweet(boolean value) {
    this.is_retweet = value;
  }

  /**
   * Gets the value of the 'media_attachments' field.
   * @return Attachments such as images, videos, or gifs included in the tweet
   */
  public java.util.List<com.miguno.avro.Media> getMediaAttachments() {
    return media_attachments;
  }


  /**
   * Sets the value of the 'media_attachments' field.
   * Attachments such as images, videos, or gifs included in the tweet
   * @param value the value to set.
   */
  public void setMediaAttachments(java.util.List<com.miguno.avro.Media> value) {
    this.media_attachments = value;
  }

  /**
   * Gets the value of the 'reply_to_tweet_id' field.
   * @return If the tweet is a reply, this is the ID of the parent tweet
   */
  public java.lang.CharSequence getReplyToTweetId() {
    return reply_to_tweet_id;
  }


  /**
   * Sets the value of the 'reply_to_tweet_id' field.
   * If the tweet is a reply, this is the ID of the parent tweet
   * @param value the value to set.
   */
  public void setReplyToTweetId(java.lang.CharSequence value) {
    this.reply_to_tweet_id = value;
  }

  /**
   * Gets the value of the 'user_metadata' field.
   * @return Metadata about the user who posted the tweet
   */
  public com.miguno.avro.UserMetadata getUserMetadata() {
    return user_metadata;
  }


  /**
   * Sets the value of the 'user_metadata' field.
   * Metadata about the user who posted the tweet
   * @param value the value to set.
   */
  public void setUserMetadata(com.miguno.avro.UserMetadata value) {
    this.user_metadata = value;
  }

  /**
   * Creates a new twitter RecordBuilder.
   * @return A new twitter RecordBuilder
   */
  public static com.miguno.avro.twitter.Builder newBuilder() {
    return new com.miguno.avro.twitter.Builder();
  }

  /**
   * Creates a new twitter RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new twitter RecordBuilder
   */
  public static com.miguno.avro.twitter.Builder newBuilder(com.miguno.avro.twitter.Builder other) {
    if (other == null) {
      return new com.miguno.avro.twitter.Builder();
    } else {
      return new com.miguno.avro.twitter.Builder(other);
    }
  }

  /**
   * Creates a new twitter RecordBuilder by copying an existing twitter instance.
   * @param other The existing instance to copy.
   * @return A new twitter RecordBuilder
   */
  public static com.miguno.avro.twitter.Builder newBuilder(com.miguno.avro.twitter other) {
    if (other == null) {
      return new com.miguno.avro.twitter.Builder();
    } else {
      return new com.miguno.avro.twitter.Builder(other);
    }
  }

  /**
   * RecordBuilder for twitter instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<twitter>
    implements org.apache.avro.data.RecordBuilder<twitter> {

    /** Unique identifier for the tweet */
    private java.lang.CharSequence tweet_id;
    /** Name of the user account on Twitter.com */
    private java.lang.CharSequence username;
    /** Display name of the user (can be null if not set) */
    private java.lang.CharSequence display_name;
    /** The content of the user's Twitter message */
    private java.lang.CharSequence tweet;
    /** Unix epoch time in milliseconds when the tweet was created */
    private long timestamp;
    /** Geographical location where the tweet was posted, if available */
    private com.miguno.avro.GeoLocation geo_location;
    private com.miguno.avro.GeoLocation.Builder geo_locationBuilder;
    /** List of hashtags included in the tweet */
    private java.util.List<java.lang.CharSequence> hashtags;
    /** List of usernames mentioned in the tweet */
    private java.util.List<java.lang.CharSequence> mentions;
    /** Number of likes the tweet has received */
    private int likes;
    /** Number of retweets */
    private int retweets;
    /** Whether this tweet is a retweet */
    private boolean is_retweet;
    /** Attachments such as images, videos, or gifs included in the tweet */
    private java.util.List<com.miguno.avro.Media> media_attachments;
    /** If the tweet is a reply, this is the ID of the parent tweet */
    private java.lang.CharSequence reply_to_tweet_id;
    /** Metadata about the user who posted the tweet */
    private com.miguno.avro.UserMetadata user_metadata;
    private com.miguno.avro.UserMetadata.Builder user_metadataBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.miguno.avro.twitter.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tweet_id)) {
        this.tweet_id = data().deepCopy(fields()[0].schema(), other.tweet_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.display_name)) {
        this.display_name = data().deepCopy(fields()[2].schema(), other.display_name);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.tweet)) {
        this.tweet = data().deepCopy(fields()[3].schema(), other.tweet);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.geo_location)) {
        this.geo_location = data().deepCopy(fields()[5].schema(), other.geo_location);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasGeoLocationBuilder()) {
        this.geo_locationBuilder = com.miguno.avro.GeoLocation.newBuilder(other.getGeoLocationBuilder());
      }
      if (isValidValue(fields()[6], other.hashtags)) {
        this.hashtags = data().deepCopy(fields()[6].schema(), other.hashtags);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.mentions)) {
        this.mentions = data().deepCopy(fields()[7].schema(), other.mentions);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.likes)) {
        this.likes = data().deepCopy(fields()[8].schema(), other.likes);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.retweets)) {
        this.retweets = data().deepCopy(fields()[9].schema(), other.retweets);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.is_retweet)) {
        this.is_retweet = data().deepCopy(fields()[10].schema(), other.is_retweet);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.media_attachments)) {
        this.media_attachments = data().deepCopy(fields()[11].schema(), other.media_attachments);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.reply_to_tweet_id)) {
        this.reply_to_tweet_id = data().deepCopy(fields()[12].schema(), other.reply_to_tweet_id);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.user_metadata)) {
        this.user_metadata = data().deepCopy(fields()[13].schema(), other.user_metadata);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (other.hasUserMetadataBuilder()) {
        this.user_metadataBuilder = com.miguno.avro.UserMetadata.newBuilder(other.getUserMetadataBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing twitter instance
     * @param other The existing instance to copy.
     */
    private Builder(com.miguno.avro.twitter other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.tweet_id)) {
        this.tweet_id = data().deepCopy(fields()[0].schema(), other.tweet_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.display_name)) {
        this.display_name = data().deepCopy(fields()[2].schema(), other.display_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tweet)) {
        this.tweet = data().deepCopy(fields()[3].schema(), other.tweet);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[4].schema(), other.timestamp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.geo_location)) {
        this.geo_location = data().deepCopy(fields()[5].schema(), other.geo_location);
        fieldSetFlags()[5] = true;
      }
      this.geo_locationBuilder = null;
      if (isValidValue(fields()[6], other.hashtags)) {
        this.hashtags = data().deepCopy(fields()[6].schema(), other.hashtags);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mentions)) {
        this.mentions = data().deepCopy(fields()[7].schema(), other.mentions);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.likes)) {
        this.likes = data().deepCopy(fields()[8].schema(), other.likes);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.retweets)) {
        this.retweets = data().deepCopy(fields()[9].schema(), other.retweets);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.is_retweet)) {
        this.is_retweet = data().deepCopy(fields()[10].schema(), other.is_retweet);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.media_attachments)) {
        this.media_attachments = data().deepCopy(fields()[11].schema(), other.media_attachments);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.reply_to_tweet_id)) {
        this.reply_to_tweet_id = data().deepCopy(fields()[12].schema(), other.reply_to_tweet_id);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.user_metadata)) {
        this.user_metadata = data().deepCopy(fields()[13].schema(), other.user_metadata);
        fieldSetFlags()[13] = true;
      }
      this.user_metadataBuilder = null;
    }

    /**
      * Gets the value of the 'tweet_id' field.
      * Unique identifier for the tweet
      * @return The value.
      */
    public java.lang.CharSequence getTweetId() {
      return tweet_id;
    }


    /**
      * Sets the value of the 'tweet_id' field.
      * Unique identifier for the tweet
      * @param value The value of 'tweet_id'.
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder setTweetId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.tweet_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tweet_id' field has been set.
      * Unique identifier for the tweet
      * @return True if the 'tweet_id' field has been set, false otherwise.
      */
    public boolean hasTweetId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tweet_id' field.
      * Unique identifier for the tweet
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder clearTweetId() {
      tweet_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'username' field.
      * Name of the user account on Twitter.com
      * @return The value.
      */
    public java.lang.CharSequence getUsername() {
      return username;
    }


    /**
      * Sets the value of the 'username' field.
      * Name of the user account on Twitter.com
      * @param value The value of 'username'.
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.username = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * Name of the user account on Twitter.com
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'username' field.
      * Name of the user account on Twitter.com
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder clearUsername() {
      username = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'display_name' field.
      * Display name of the user (can be null if not set)
      * @return The value.
      */
    public java.lang.CharSequence getDisplayName() {
      return display_name;
    }


    /**
      * Sets the value of the 'display_name' field.
      * Display name of the user (can be null if not set)
      * @param value The value of 'display_name'.
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder setDisplayName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.display_name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'display_name' field has been set.
      * Display name of the user (can be null if not set)
      * @return True if the 'display_name' field has been set, false otherwise.
      */
    public boolean hasDisplayName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'display_name' field.
      * Display name of the user (can be null if not set)
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder clearDisplayName() {
      display_name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tweet' field.
      * The content of the user's Twitter message
      * @return The value.
      */
    public java.lang.CharSequence getTweet() {
      return tweet;
    }


    /**
      * Sets the value of the 'tweet' field.
      * The content of the user's Twitter message
      * @param value The value of 'tweet'.
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder setTweet(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.tweet = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tweet' field has been set.
      * The content of the user's Twitter message
      * @return True if the 'tweet' field has been set, false otherwise.
      */
    public boolean hasTweet() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tweet' field.
      * The content of the user's Twitter message
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder clearTweet() {
      tweet = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Unix epoch time in milliseconds when the tweet was created
      * @return The value.
      */
    public long getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Unix epoch time in milliseconds when the tweet was created
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder setTimestamp(long value) {
      validate(fields()[4], value);
      this.timestamp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Unix epoch time in milliseconds when the tweet was created
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Unix epoch time in milliseconds when the tweet was created
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder clearTimestamp() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'geo_location' field.
      * Geographical location where the tweet was posted, if available
      * @return The value.
      */
    public com.miguno.avro.GeoLocation getGeoLocation() {
      return geo_location;
    }


    /**
      * Sets the value of the 'geo_location' field.
      * Geographical location where the tweet was posted, if available
      * @param value The value of 'geo_location'.
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder setGeoLocation(com.miguno.avro.GeoLocation value) {
      validate(fields()[5], value);
      this.geo_locationBuilder = null;
      this.geo_location = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'geo_location' field has been set.
      * Geographical location where the tweet was posted, if available
      * @return True if the 'geo_location' field has been set, false otherwise.
      */
    public boolean hasGeoLocation() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'geo_location' field and creates one if it doesn't exist yet.
     * Geographical location where the tweet was posted, if available
     * @return This builder.
     */
    public com.miguno.avro.GeoLocation.Builder getGeoLocationBuilder() {
      if (geo_locationBuilder == null) {
        if (hasGeoLocation()) {
          setGeoLocationBuilder(com.miguno.avro.GeoLocation.newBuilder(geo_location));
        } else {
          setGeoLocationBuilder(com.miguno.avro.GeoLocation.newBuilder());
        }
      }
      return geo_locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'geo_location' field
     * Geographical location where the tweet was posted, if available
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.miguno.avro.twitter.Builder setGeoLocationBuilder(com.miguno.avro.GeoLocation.Builder value) {
      clearGeoLocation();
      geo_locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'geo_location' field has an active Builder instance
     * Geographical location where the tweet was posted, if available
     * @return True if the 'geo_location' field has an active Builder instance
     */
    public boolean hasGeoLocationBuilder() {
      return geo_locationBuilder != null;
    }

    /**
      * Clears the value of the 'geo_location' field.
      * Geographical location where the tweet was posted, if available
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder clearGeoLocation() {
      geo_location = null;
      geo_locationBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'hashtags' field.
      * List of hashtags included in the tweet
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getHashtags() {
      return hashtags;
    }


    /**
      * Sets the value of the 'hashtags' field.
      * List of hashtags included in the tweet
      * @param value The value of 'hashtags'.
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder setHashtags(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.hashtags = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'hashtags' field has been set.
      * List of hashtags included in the tweet
      * @return True if the 'hashtags' field has been set, false otherwise.
      */
    public boolean hasHashtags() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'hashtags' field.
      * List of hashtags included in the tweet
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder clearHashtags() {
      hashtags = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'mentions' field.
      * List of usernames mentioned in the tweet
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getMentions() {
      return mentions;
    }


    /**
      * Sets the value of the 'mentions' field.
      * List of usernames mentioned in the tweet
      * @param value The value of 'mentions'.
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder setMentions(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.mentions = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'mentions' field has been set.
      * List of usernames mentioned in the tweet
      * @return True if the 'mentions' field has been set, false otherwise.
      */
    public boolean hasMentions() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'mentions' field.
      * List of usernames mentioned in the tweet
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder clearMentions() {
      mentions = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'likes' field.
      * Number of likes the tweet has received
      * @return The value.
      */
    public int getLikes() {
      return likes;
    }


    /**
      * Sets the value of the 'likes' field.
      * Number of likes the tweet has received
      * @param value The value of 'likes'.
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder setLikes(int value) {
      validate(fields()[8], value);
      this.likes = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'likes' field has been set.
      * Number of likes the tweet has received
      * @return True if the 'likes' field has been set, false otherwise.
      */
    public boolean hasLikes() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'likes' field.
      * Number of likes the tweet has received
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder clearLikes() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'retweets' field.
      * Number of retweets
      * @return The value.
      */
    public int getRetweets() {
      return retweets;
    }


    /**
      * Sets the value of the 'retweets' field.
      * Number of retweets
      * @param value The value of 'retweets'.
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder setRetweets(int value) {
      validate(fields()[9], value);
      this.retweets = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'retweets' field has been set.
      * Number of retweets
      * @return True if the 'retweets' field has been set, false otherwise.
      */
    public boolean hasRetweets() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'retweets' field.
      * Number of retweets
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder clearRetweets() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'is_retweet' field.
      * Whether this tweet is a retweet
      * @return The value.
      */
    public boolean getIsRetweet() {
      return is_retweet;
    }


    /**
      * Sets the value of the 'is_retweet' field.
      * Whether this tweet is a retweet
      * @param value The value of 'is_retweet'.
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder setIsRetweet(boolean value) {
      validate(fields()[10], value);
      this.is_retweet = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'is_retweet' field has been set.
      * Whether this tweet is a retweet
      * @return True if the 'is_retweet' field has been set, false otherwise.
      */
    public boolean hasIsRetweet() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'is_retweet' field.
      * Whether this tweet is a retweet
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder clearIsRetweet() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'media_attachments' field.
      * Attachments such as images, videos, or gifs included in the tweet
      * @return The value.
      */
    public java.util.List<com.miguno.avro.Media> getMediaAttachments() {
      return media_attachments;
    }


    /**
      * Sets the value of the 'media_attachments' field.
      * Attachments such as images, videos, or gifs included in the tweet
      * @param value The value of 'media_attachments'.
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder setMediaAttachments(java.util.List<com.miguno.avro.Media> value) {
      validate(fields()[11], value);
      this.media_attachments = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'media_attachments' field has been set.
      * Attachments such as images, videos, or gifs included in the tweet
      * @return True if the 'media_attachments' field has been set, false otherwise.
      */
    public boolean hasMediaAttachments() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'media_attachments' field.
      * Attachments such as images, videos, or gifs included in the tweet
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder clearMediaAttachments() {
      media_attachments = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'reply_to_tweet_id' field.
      * If the tweet is a reply, this is the ID of the parent tweet
      * @return The value.
      */
    public java.lang.CharSequence getReplyToTweetId() {
      return reply_to_tweet_id;
    }


    /**
      * Sets the value of the 'reply_to_tweet_id' field.
      * If the tweet is a reply, this is the ID of the parent tweet
      * @param value The value of 'reply_to_tweet_id'.
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder setReplyToTweetId(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.reply_to_tweet_id = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'reply_to_tweet_id' field has been set.
      * If the tweet is a reply, this is the ID of the parent tweet
      * @return True if the 'reply_to_tweet_id' field has been set, false otherwise.
      */
    public boolean hasReplyToTweetId() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'reply_to_tweet_id' field.
      * If the tweet is a reply, this is the ID of the parent tweet
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder clearReplyToTweetId() {
      reply_to_tweet_id = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_metadata' field.
      * Metadata about the user who posted the tweet
      * @return The value.
      */
    public com.miguno.avro.UserMetadata getUserMetadata() {
      return user_metadata;
    }


    /**
      * Sets the value of the 'user_metadata' field.
      * Metadata about the user who posted the tweet
      * @param value The value of 'user_metadata'.
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder setUserMetadata(com.miguno.avro.UserMetadata value) {
      validate(fields()[13], value);
      this.user_metadataBuilder = null;
      this.user_metadata = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'user_metadata' field has been set.
      * Metadata about the user who posted the tweet
      * @return True if the 'user_metadata' field has been set, false otherwise.
      */
    public boolean hasUserMetadata() {
      return fieldSetFlags()[13];
    }

    /**
     * Gets the Builder instance for the 'user_metadata' field and creates one if it doesn't exist yet.
     * Metadata about the user who posted the tweet
     * @return This builder.
     */
    public com.miguno.avro.UserMetadata.Builder getUserMetadataBuilder() {
      if (user_metadataBuilder == null) {
        if (hasUserMetadata()) {
          setUserMetadataBuilder(com.miguno.avro.UserMetadata.newBuilder(user_metadata));
        } else {
          setUserMetadataBuilder(com.miguno.avro.UserMetadata.newBuilder());
        }
      }
      return user_metadataBuilder;
    }

    /**
     * Sets the Builder instance for the 'user_metadata' field
     * Metadata about the user who posted the tweet
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.miguno.avro.twitter.Builder setUserMetadataBuilder(com.miguno.avro.UserMetadata.Builder value) {
      clearUserMetadata();
      user_metadataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'user_metadata' field has an active Builder instance
     * Metadata about the user who posted the tweet
     * @return True if the 'user_metadata' field has an active Builder instance
     */
    public boolean hasUserMetadataBuilder() {
      return user_metadataBuilder != null;
    }

    /**
      * Clears the value of the 'user_metadata' field.
      * Metadata about the user who posted the tweet
      * @return This builder.
      */
    public com.miguno.avro.twitter.Builder clearUserMetadata() {
      user_metadata = null;
      user_metadataBuilder = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public twitter build() {
      try {
        twitter record = new twitter();
        record.tweet_id = fieldSetFlags()[0] ? this.tweet_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.username = fieldSetFlags()[1] ? this.username : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.display_name = fieldSetFlags()[2] ? this.display_name : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.tweet = fieldSetFlags()[3] ? this.tweet : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.timestamp = fieldSetFlags()[4] ? this.timestamp : (java.lang.Long) defaultValue(fields()[4]);
        if (geo_locationBuilder != null) {
          try {
            record.geo_location = this.geo_locationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("geo_location"));
            throw e;
          }
        } else {
          record.geo_location = fieldSetFlags()[5] ? this.geo_location : (com.miguno.avro.GeoLocation) defaultValue(fields()[5]);
        }
        record.hashtags = fieldSetFlags()[6] ? this.hashtags : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[6]);
        record.mentions = fieldSetFlags()[7] ? this.mentions : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[7]);
        record.likes = fieldSetFlags()[8] ? this.likes : (java.lang.Integer) defaultValue(fields()[8]);
        record.retweets = fieldSetFlags()[9] ? this.retweets : (java.lang.Integer) defaultValue(fields()[9]);
        record.is_retweet = fieldSetFlags()[10] ? this.is_retweet : (java.lang.Boolean) defaultValue(fields()[10]);
        record.media_attachments = fieldSetFlags()[11] ? this.media_attachments : (java.util.List<com.miguno.avro.Media>) defaultValue(fields()[11]);
        record.reply_to_tweet_id = fieldSetFlags()[12] ? this.reply_to_tweet_id : (java.lang.CharSequence) defaultValue(fields()[12]);
        if (user_metadataBuilder != null) {
          try {
            record.user_metadata = this.user_metadataBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("user_metadata"));
            throw e;
          }
        } else {
          record.user_metadata = fieldSetFlags()[13] ? this.user_metadata : (com.miguno.avro.UserMetadata) defaultValue(fields()[13]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<twitter>
    WRITER$ = (org.apache.avro.io.DatumWriter<twitter>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<twitter>
    READER$ = (org.apache.avro.io.DatumReader<twitter>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.tweet_id);

    out.writeString(this.username);

    if (this.display_name == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.display_name);
    }

    out.writeString(this.tweet);

    out.writeLong(this.timestamp);

    if (this.geo_location == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.geo_location.customEncode(out);
    }

    long size0 = this.hashtags.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.hashtags) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.mentions.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.CharSequence e1: this.mentions) {
      actualSize1++;
      out.startItem();
      out.writeString(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    out.writeInt(this.likes);

    out.writeInt(this.retweets);

    out.writeBoolean(this.is_retweet);

    if (this.media_attachments == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.media_attachments.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (com.miguno.avro.Media e2: this.media_attachments) {
        actualSize2++;
        out.startItem();
        e2.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    if (this.reply_to_tweet_id == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.reply_to_tweet_id);
    }

    this.user_metadata.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.tweet_id = in.readString(this.tweet_id instanceof Utf8 ? (Utf8)this.tweet_id : null);

      this.username = in.readString(this.username instanceof Utf8 ? (Utf8)this.username : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.display_name = null;
      } else {
        this.display_name = in.readString(this.display_name instanceof Utf8 ? (Utf8)this.display_name : null);
      }

      this.tweet = in.readString(this.tweet instanceof Utf8 ? (Utf8)this.tweet : null);

      this.timestamp = in.readLong();

      if (in.readIndex() != 1) {
        in.readNull();
        this.geo_location = null;
      } else {
        if (this.geo_location == null) {
          this.geo_location = new com.miguno.avro.GeoLocation();
        }
        this.geo_location.customDecode(in);
      }

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.hashtags;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("hashtags").schema());
        this.hashtags = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a1 = this.mentions;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("mentions").schema());
        this.mentions = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
          a1.add(e1);
        }
      }

      this.likes = in.readInt();

      this.retweets = in.readInt();

      this.is_retweet = in.readBoolean();

      if (in.readIndex() != 1) {
        in.readNull();
        this.media_attachments = null;
      } else {
        long size2 = in.readArrayStart();
        java.util.List<com.miguno.avro.Media> a2 = this.media_attachments;
        if (a2 == null) {
          a2 = new SpecificData.Array<com.miguno.avro.Media>((int)size2, SCHEMA$.getField("media_attachments").schema().getTypes().get(1));
          this.media_attachments = a2;
        } else a2.clear();
        SpecificData.Array<com.miguno.avro.Media> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<com.miguno.avro.Media>)a2 : null);
        for ( ; 0 < size2; size2 = in.arrayNext()) {
          for ( ; size2 != 0; size2--) {
            com.miguno.avro.Media e2 = (ga2 != null ? ga2.peek() : null);
            if (e2 == null) {
              e2 = new com.miguno.avro.Media();
            }
            e2.customDecode(in);
            a2.add(e2);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.reply_to_tweet_id = null;
      } else {
        this.reply_to_tweet_id = in.readString(this.reply_to_tweet_id instanceof Utf8 ? (Utf8)this.reply_to_tweet_id : null);
      }

      if (this.user_metadata == null) {
        this.user_metadata = new com.miguno.avro.UserMetadata();
      }
      this.user_metadata.customDecode(in);

    } else {
      for (int i = 0; i < 14; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.tweet_id = in.readString(this.tweet_id instanceof Utf8 ? (Utf8)this.tweet_id : null);
          break;

        case 1:
          this.username = in.readString(this.username instanceof Utf8 ? (Utf8)this.username : null);
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.display_name = null;
          } else {
            this.display_name = in.readString(this.display_name instanceof Utf8 ? (Utf8)this.display_name : null);
          }
          break;

        case 3:
          this.tweet = in.readString(this.tweet instanceof Utf8 ? (Utf8)this.tweet : null);
          break;

        case 4:
          this.timestamp = in.readLong();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.geo_location = null;
          } else {
            if (this.geo_location == null) {
              this.geo_location = new com.miguno.avro.GeoLocation();
            }
            this.geo_location.customDecode(in);
          }
          break;

        case 6:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.hashtags;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("hashtags").schema());
            this.hashtags = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 7:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a1 = this.mentions;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("mentions").schema());
            this.mentions = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
              a1.add(e1);
            }
          }
          break;

        case 8:
          this.likes = in.readInt();
          break;

        case 9:
          this.retweets = in.readInt();
          break;

        case 10:
          this.is_retweet = in.readBoolean();
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.media_attachments = null;
          } else {
            long size2 = in.readArrayStart();
            java.util.List<com.miguno.avro.Media> a2 = this.media_attachments;
            if (a2 == null) {
              a2 = new SpecificData.Array<com.miguno.avro.Media>((int)size2, SCHEMA$.getField("media_attachments").schema().getTypes().get(1));
              this.media_attachments = a2;
            } else a2.clear();
            SpecificData.Array<com.miguno.avro.Media> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<com.miguno.avro.Media>)a2 : null);
            for ( ; 0 < size2; size2 = in.arrayNext()) {
              for ( ; size2 != 0; size2--) {
                com.miguno.avro.Media e2 = (ga2 != null ? ga2.peek() : null);
                if (e2 == null) {
                  e2 = new com.miguno.avro.Media();
                }
                e2.customDecode(in);
                a2.add(e2);
              }
            }
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.reply_to_tweet_id = null;
          } else {
            this.reply_to_tweet_id = in.readString(this.reply_to_tweet_id instanceof Utf8 ? (Utf8)this.reply_to_tweet_id : null);
          }
          break;

        case 13:
          if (this.user_metadata == null) {
            this.user_metadata = new com.miguno.avro.UserMetadata();
          }
          this.user_metadata.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










